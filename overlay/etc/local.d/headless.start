#!/bin/sh

main () {
	# Redirect stdout and errors to console as rc.local does not log anything
	exec 1>/dev/console 2>&1
	mkdir /tmp/.trash
	ovlpath=$( find /media -type d -path '*/.*' -prune -o -type f -name *.apkovl.tar.gz -exec dirname {} \; | head -1 )
	setup_networking
	setup_repositories
	install_packages
	setup_cgroups
	set_time
	setup_ssh
	create_users
	install_k3s
}

setup_networking () {
	logger -st ${0##*/} "Setting up network interfaces..."
	for dev in $(ls /sys/class/net)
	do
		case ${dev%%[0-9]*} in
			lo)
				cat <<-EOF >> /etc/network/interfaces
				auto $dev
				iface $dev inet loopback

				EOF
				;;
			eth)
				cat <<-EOF >> /etc/network/interfaces
				auto $dev
				iface $dev inet dhcp

				EOF
				;;
		esac
	done

	logger -st ${0##*/} "Set up network interfaces:"
	cat /etc/network/interfaces

	hostname -F /etc/hostname
	rc-service networking start
}

setup_repositories () {
	## Set up package repositories
	logger -st ${0##*/} "Set up package repositories"
	cp /etc/apk/repositories /etc/apk/repositories_backup
	echo "http://dl-cdn.alpinelinux.org/alpine/v$(cut -d'.' -f1,2 /etc/alpine-release)/main/" >> /etc/apk/repositories
	echo "http://dl-cdn.alpinelinux.org/alpine/v$(cut -d'.' -f1,2 /etc/alpine-release)/community/" >> /etc/apk/repositories
	apk update
}

install_packages () {
	apk update
	apk add yq
	apk add --no-cache grep=3.8-r1 # this version seems to work for the k3s install script (otherwise 'grep -P' is not a valid command)
}

setup_ssh () {
	## Set up SSH
	logger -st ${0##*/} "Installing openssh"
	apk add openssh openssh-server-pam

	logger -st ${0##*/} "Setting up up sshd"
	mv /etc/sshd_config /etc/ssh/sshd_config
	ssh-keygen -A
	rc-service sshd start
	/etc/init.d/sshd start
}

create_users () {
	## Create users with SSH access
	logger -st ${0##*/} "Installing sudo package..."
	apk add sudo > /root/sudo.log
	for username in $( ls /etc/pubkeys )
	do
		logger -st ${0##*/} "Creating user $username..."
		adduser -D $username -D
		mkdir -p /home/$username/.ssh
		mv /etc/pubkeys/$username /home/$username/.ssh/authorized_keys
		chown -R $username:$username /home/$username
		chmod 700 /home/$username/.ssh
		chmod 600 /home/$username/.ssh/authorized_keys
		echo "$username  ALL=(ALL)  NOPASSWD: ALL" > /etc/sudoers.d/$username
		logger -st ${0##*/} "    Sudoers file: $(cat /etc/sudoers.d/$username)"
		logger -st ${0##*/} "    Created user $username"
		logger -st ${0##*/} "    Authorized key: $(cat /home/$username/.ssh/authorized_keys)"
	done
}

set_time () {
	logger -st ${0##*/} "Setting time"
	ntpd -d -q -n -p uk.pool.ntp.org
	cat <<-EOF > /etc/periodic/daily/ntpd.sh
		#!/bin/sh
		ntpd -d -q -n -p uk.pool.ntp.org
		EOF
	chmod +x /etc/periodic/daily/ntpd.sh
}

setup_cgroups () {
	logger -st ${0##*/} "Configuring cgroups"
	apk add cgroup-tools
	rc-update add cgroups
}

install_k3s () {
	logger -st ${0##*/} "Persisting the k3s directory"
	mkdir -p /var/lib/rancher/k3s && mount -t ext4 -o rw /dev/mmcblk0p2 /var/lib/rancher/

	logger -st ${0##*/} "Installing k3s"
	k3s_exec=$(cat /etc/rancher/k3s/exec)
	if [[ $k3s_exec == "" ]] ; then
		$k3s_exec=server
		logger -st ${0##*/} "K3s exec was not set, defaulting to $k3s_exec"
	fi

	if [[ $k3s_exec == server || $k3s_exec == agent ]] ; then
		logger -st ${0##*/} "K3s exec: $k3s_exec"
	else
		logger -st ${0##*/} "ERROR: invalid k3s exec ($k3s_exec), should be one of: server, agent"
		exit 1
	fi

	mv /etc/rancher/install/k3s-install.sh /usr/local/bin/
	chmod +x /usr/local/bin/k3s-install.sh

	mv /etc/rancher/install/k3s /usr/local/bin/
	chmod +x /usr/local/bin/k3s

	INSTALL_K3S_SKIP_DOWNLOAD=true INSTALL_K3S_EXEC=$k3s_exec /usr/local/bin/k3s-install.sh
	rc-service cgroups start # ensure the cgroups service is running
	logger -st ${0##*/} "Waiting for the server to be up"
	while [[ "$(k3s kubectl get --raw='/readyz')" != "ok" ]]; do sleep 5; done
	logger -st ${0##*/} "Waiting for the node to be ready"
	k3s kubectl wait --for=condition=Ready node $(cat /etc/hostname) --timeout=600s
	k3s kubectl get nodes
}

post_cleanup () {
	## Prep for final post-cleanup
	cat <<-EOF > /tmp/.trash/post-cleanup
		#!/bin/sh
		logger -st ${0##*/} "Cleaning-up..."
		# rm /etc/modules-load.d/g_ether.conf
		# rm /etc/modprobe.d/g_ether.conf
		rc-update del local default
		rm /etc/local.d/headless.start

		logger -st ${0##*/} "Done !!"
		EOF
	chmod +x /tmp/.trash/post-cleanup
	exec /tmp/.trash/post-cleanup
}

main; exit
